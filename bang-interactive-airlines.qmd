---
tags:
  # 🔑 中關強權（16）
  - 🇹🇼臺灣
  - 🇸🇬新加坡
  - 🇳🇱荷蘭
  - 🇫🇮芬蘭
  - 🇺🇦烏克蘭
  - 🇳🇴挪威
  - 🇮🇱以色列
  - 🇰🇵北韓
  - 🇮🇷伊朗
  - 🇮🇪愛爾蘭
  - 🇸🇪瑞典
  - 🇻🇳越南
  - 🇵🇭菲律賓
  - 🇳🇬奈及利亞
  - 🇰🇪肯亞
  - 🇨🇴哥倫比亞
  # 🗺️ 中地強權（13）
  - 🇦🇷阿根廷
  - 🇦🇺澳洲
  - 🇧🇷巴西
  - 🇨🇦加拿大
  - 🇮🇳印度
  - 🇮🇩印尼
  - 🇮🇹義大利
  - 🇰🇷南韓
  - 🇲🇽墨西哥
  - 🇵🇱波蘭
  - 🇸🇦沙烏地阿拉伯
  - 🇿🇦南非
  - 🇹🇷土耳其
  # ⏫ 中上強權（5）
  - 🇬🇧英國
  - 🇫🇷法國
  - 🇷🇺俄羅斯
  - 🇩🇪德國
  - 🇯🇵日本
  # extra
  - 🇺🇸美國
  - 🇨🇳中國
  - 🇰🇵北韓
---

# 邦與幫

地緣政經關係可視化：

- 🌊 **海洋交通線**（SLOC, _Sea Lines of Communication_），標誌著由貨運（含部分內陸水運）的全球密度及分佈，是全球經濟的「大動脈」。    
- 🔗 **全球價值鏈**（GVC, _Global Value Chains_），可由SLOC展示全球貿易的**80%以上**的往來交流，為最重要的國際關係**交易主義**（transactionalism）的具體體現。    
- 🌐 轉動全球，觀察全球貿易的動脈及微血管，便能評估過去、當下及未來的「**邦與幫**」：
    - 🏛️ **邦**：以制度、條約、共同規範為基礎的國際聯盟與合作體系。
    - 🤝 **幫**：以利益、資源、供應鏈為紐帶的實用主義網絡與依賴關係。

## 全球中等權力（全球化）

```{=html}
<div style="display: flex; align-items: center; margin-top: 10px;">
    中心：<div id="centerCoordLabel" style="color: #ccc; margin-right: 20px; font-weight: bold; font-family: sans-serif;">
        ---
    </div>

    <select id="middlePowerSelector">
        </select>
</div>
<div id="globe" style="width:100%; height:auto; min-height:520px;background:#000"></div>

<script type="importmap">
{
  "imports": {
    "three": "https://cdn.jsdelivr.net/npm/three@0.155.0/build/three.module.js",
    "three/examples/jsm/": "https://cdn.jsdelivr.net/npm/three@0.155.0/examples/jsm/",
    "d3": "https://cdn.jsdelivr.net/npm/d3@7/+esm",
    "topojson-client": "https://cdn.jsdelivr.net/npm/topojson-client@3/+esm"
  }
}
</script>

<script type="module">
import * as THREE from "three";
import { Line2 } from "three/examples/jsm/lines/Line2.js";
import { LineMaterial } from "three/examples/jsm/lines/LineMaterial.js";
import { LineGeometry } from "three/examples/jsm/lines/LineGeometry.js";

import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import * as d3 from "d3";


import { feature } from "topojson-client";

/* 🌍 ===== Settings ===== */
const GLOBE_CONFIG = {
    RADIUS: 200,
    // Camera settings
    CAMERA_DISTANCE: 200 * 2.6,   // ~520
    CLOSE_DISTANCE:  200 * 1.2,   // ~240
    // Resource URLs
    TOPO_URL: "https://cdn.jsdelivr.net/npm/world-atlas@2/countries-50m.json",
    ISO_MAP_URL: "https://mid.frmai.life/resources/iso_map.json",
    SAT_TEXTURE_URL: "https://mid.frmai.life/images/earth-blue-marble-airline.png",
    //TOPO_URL: "https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson",
    //SAT_TEXTURE_URL: "https://cdn.jsdelivr.net/npm/three-globe/example/img/earth-blue-marble.jpg",
};

// Destructure values for convenience and readability
const { RADIUS, SAT_TEXTURE_URL, TOPO_URL, CAMERA_DISTANCE, CLOSE_DISTANCE } = GLOBE_CONFIG;

/* 🌍 ===== Data Loader ===== */
let cachedCountries = null;
let highlightGroup = new THREE.Group();
let dashAnimationTime = 0;

// This setup only needs to be done once, outside the render loop
const raycaster = new THREE.Raycaster();
const screenCenter = new THREE.Vector2(0, 0); // Center of screen in NDC


async function loadCountriesWithISO3() {
  if (cachedCountries) return cachedCountries;

  const [topo, isoMap] = await Promise.all([
    fetch(GLOBE_CONFIG.TOPO_URL).then(r => r.json()),
    fetch(GLOBE_CONFIG.ISO_MAP_URL).then(r => r.json())
  ]);

  const countries = feature(topo, topo.objects.countries);

  const reverseMap = {};
  for (const [iso3, id] of Object.entries(isoMap)) {
    reverseMap[id] = iso3;
    
  }

  countries.features.forEach(f => {
    const iso3 = reverseMap[Number(f.id)];
    if (iso3) f.properties.iso3 = iso3;
  /* debug
    console.log("Topo ID:", f.id, "→", reverseMap[f.id]);
  */
  });

  cachedCountries = countries;
  return countries;
}


/* ========================================= */
/* 🌍 Middle Powers Configuration (ISO3 keys) */
/* ========================================= */
const MIDDLE_POWERS = {
  // === 🔑 中關強權 (CRITICAL MIDDLE POWERS - 16) ===
  "TWN": { label: "🇹🇼 臺灣 (Taiwan)", name: "Taiwan", lat: 23.5, lon: 121.0, color: 0x2c7bb6, closeDistF: 1.125, type: "完全民主", middlep: "🔑中關" },
  "SGP": { label: "🇸🇬 新加坡 (Singapore)", name: "Singapore", lat: 1.35, lon: 103.8, color: 0x8dc1dc, closeDistF: 1.05, type: "選舉式民主", middlep: "🔑中關" },
  "NLD": { label: "🇳🇱 荷蘭 (Netherlands)", name: "Netherlands", lat: 52.3, lon: 5.5, color: 0x2c7bb6, closeDistF: 1.15, type: "完全民主", middlep: "🔑中關" },
  "FIN": { label: "🇫🇮 芬蘭 (Finland)", name: "Finland", lat: 62.0, lon: 26.0, color: 0x2c7bb6, closeDistF: 1.35, type: "完全民主", middlep: "🔑中關" },
  "UKR": { label: "🇺🇦 烏克蘭 (Ukraine)", name: "Ukraine", lat: 49.0, lon: 32.0, color: 0x8dc1dc, closeDistF: 1.38, type: "選舉式民主", middlep: "🔑中關" },
  "NOR": { label: "🇳🇴 挪威 (Norway)", name: "Norway", lat: 61.0, lon: 8.0, color: 0x2c7bb6, closeDistF: 1.39, type: "完全民主", middlep: "🔑中關" },
  "ISR": { label: "🇮🇱 以色列 (Israel)", name: "Israel", lat: 31.5, lon: 34.8, color: 0x2c7bb6, closeDistF: 1.25, type: "實質民主", middlep: "🔑中關" },
  "PRK": { label: "🇰🇵 北韓 (North Korea)", name: "North Korea", lat: 40.0, lon: 127.0, color: 0xDFA052, closeDistF: 1.40, type: "非選舉威權", middlep: "🔑中關" },
  "IRN": { label: "🇮🇷 伊朗 (Iran)", name: "Iran", lat: 32.0, lon: 53.0, color: 0xE6F598, closeDistF: 1.50, type: "混合威權", middlep: "🔑中關" },
  "IRL": { label: "🇮🇪 愛爾蘭 (Ireland)", name: "Ireland", lat: 53.3, lon: -8.0, color: 0x2c7bb6, closeDistF: 1.20, type: "完全民主", middlep: "🔑中關" },
  "SWE": { label: "🇸🇪 瑞典 (Sweden)", name: "Sweden", lat: 62.0, lon: 15.0, color: 0x2c7bb6, closeDistF: 1.37, type: "完全民主", middlep: "🔑中關" },
  "VNM": { label: "🇻🇳 越南 (Vietnam)", name: "Vietnam", lat: 16.0, lon: 108.0, color: 0xDFA052, closeDistF: 1.70, type: "非選舉威權", middlep: "🔑中關" },
  "PHL": { label: "🇵🇭 菲律賓 (Philippines)", name: "Philippines", lat: 13.0, lon: 122.0, color: 0x8dc1dc, closeDistF: 1.65, type: "選舉式民主", middlep: "🔑中關" },
  "NGA": { label: "🇳🇬 奈及利亞 (Nigeria)", name: "Nigeria", lat: 10.0, lon: 8.0, color: 0x8dc1dc, closeDistF: 1.90, type: "選舉式民主", middlep: "🔑中關" },
  "KEN": { label: "🇰🇪 肯亞 (Kenya)", name: "Kenya", lat: 1.0, lon: 37.0, color: 0x8dc1dc, closeDistF: 1.60, type: "選舉式民主", middlep: "🔑中關" },
  "COL": { label: "🇨🇴 哥倫比亞 (Colombia)", name: "Colombia", lat: 4.0, lon: -73.0, color: 0x8dc1dc, closeDistF: 1.50, type: "選舉式民主", middlep: "🔑中關" },

  // === 🗺️ 中地強權 (REGIONAL MIDDLE POWERS - 13) ===
  "ARG": { label: "🇦🇷 阿根廷 (Argentina)", name: "Argentina", lat: -34.0, lon: -64.0, color: 0x8dc1dc, closeDistF: 1.88, type: "選舉式民主", middlep: "🗺️中地" },
  "AUS": { label: "🇦🇺 澳洲 (Australia)", name: "Australia", lat: -25.0, lon: 135.0, color: 0x2c7bb6, closeDistF: 2, type: "完全民主", middlep: "🗺️中地" },
  "BRA": { label: "🇧🇷 巴西 (Brazil)", name: "Brazil", lat: -15.0, lon: -47.0, color: 0x8dc1dc, closeDistF: 2, type: "選舉式民主", middlep: "🗺️中地" },
  "CAN": { label: "🇨🇦 加拿大 (Canada)", name: "Canada", lat: 56.0, lon: -106.0, color: 0x2c7bb6, closeDistF: 2.1, type: "完全民主", middlep: "🗺️中地" },
  "IND": { label: "🇮🇳 印度 (India)", name: "India", lat: 21.0, lon: 78.0, color: 0x8dc1dc, closeDistF: 1.75, type: "選舉式民主", middlep: "🗺️中地" },
  "IDN": { label: "🇮🇩 印尼 (Indonesia)", name: "Indonesia", lat: -5.0, lon: 120.0, color: 0x8dc1dc, closeDistF: 1.60, type: "選舉式民主", middlep: "🗺️中地" },
  "ITA": { label: "🇮🇹 義大利 (Italy)", name: "Italy", lat: 42.0, lon: 12.5, color: 0x2c7bb6, closeDistF: 1.30, type: "完全民主", middlep: "🗺️中地" },
  "KOR": { label: "🇰🇷 南韓 (South Korea)", name: "South Korea", lat: 36.0, lon: 127.5, color: 0x2c7bb6, closeDistF: 1.18, type: "完全民主", middlep: "🗺️中地" },
  "MEX": { label: "🇲🇽 墨西哥 (Mexico)", name: "Mexico", lat: 23.0, lon: -102.0, color: 0x8dc1dc, closeDistF: 1.55, type: "選舉式民主", middlep: "🗺️中地" },
  "POL": { label: "🇵🇱 波蘭 (Poland)", name: "Poland", lat: 52.0, lon: 19.0, color: 0x8dc1dc, closeDistF: 1.33, type: "選舉式民主", middlep: "🗺️中地" },
  "SAU": { label: "🇸🇦 沙烏地阿拉伯 (Saudi Arabia)", name: "Saudi Arabia", lat: 25.0, lon: 45.0, color: 0xDFA052, closeDistF: 1.65, type: "非選舉威權", middlep: "🗺️中地" },
  "ZAF": { label: "🇿🇦 南非 (South Africa)", name: "South Africa", lat: -30.0, lon: 25.0, color: 0x8dc1dc, closeDistF: 1.48, type: "選舉式民主", middlep: "🗺️中地" },
  "TUR": { label: "🇹🇷 土耳其 (Turkey)", name: "Turkey", lat: 39.0, lon: 35.0, color: 0xE6F598, closeDistF: 1.38, type: "多黨威權", middlep: "🗺️中地" },

  // === 💪中上強權⏫ (UPPER MIDDLE POWERS - 5) - LAST ===
  "GBR": { label: "🇬🇧 英國 (United Kingdom)", name: "United Kingdom", lat: 55.0, lon: -3.0, color: 0x2c7bb6, closeDistF: 1.45, type: "完全民主", middlep: "⏫中上" },
  "FRA": { label: "🇫🇷 法國 (France)", name: "France", lat: 46.23, lon: 2.42, color: 0x2c7bb6, closeDistF: 1.45, type: "完全民主", middlep: "⏫中上" },
  "RUS": { label: "🇷🇺 俄羅斯 (Russia)", name: "Russia", lat: 60.0, lon: 90.0, color: 0xDFA052, closeDistF: 3.00, type: "非選舉威權", middlep: "⏫中上" },
  "DEU": { label: "🇩🇪 德國 (Germany)", name: "Germany", lat: 51.0, lon: 9.0, color: 0x2c7bb6, closeDistF: 1.45, type: "完全民主", middlep: "⏫中上" },
  "JPN": { label: "🇯🇵 日本 (Japan)", name: "Japan", lat: 36.0, lon: 138.0, color: 0x2c7bb6, closeDistF: 1.45, type: "完全民主", middlep: "⏫中上" }
};

/* ---------------------------------------------------- */
/* 🔥 CRITICAL FIXES: Global Declarations and Handlers */
/* ---------------------------------------------------- */

// 1. Declare scene variables globally using 'let' so they can be assigned in init()
let container, camera, renderer, controls, globeGroup,globeMesh, scene;

// 2. Define the country select element variable here, before init() uses it
const countrySelect = document.getElementById("middlePowerSelector");

// Helper to trigger animation (Needed before init() uses it)
async function animateToSelectedCountry(isoCode3) {
  if (!isoCode3) return;

  const COUNTRY_DATA = MIDDLE_POWERS[isoCode3];
  const targetCloseDistance = RADIUS * COUNTRY_DATA.closeDistF;

  const countries = await loadCountriesWithISO3();
  const feature = countries.features.find(f => f.properties.iso3 === isoCode3);

  if (!feature) {
    console.warn("False polygon found for:", isoCode3);
    return;
  }

  // ✅ Highlight only the selected country
  highlightCountry(feature, 0xffff5c, 7); // or COUNTRY_DATA.color
  
  //const [lon, lat] = d3.geoCentroid(feature);
  //France is off when using d3.geoCentroid
  await animateCameraToLatLon(COUNTRY_DATA.lat, COUNTRY_DATA.lon, CAMERA_DISTANCE, targetCloseDistance, 1500);
}



/* ---------------------------------------------------- */
/* 🚀 CORE FUNCTIONS (latLonToVector3, easeInOutQuad, slerpUnit, etc.) */
/* ---------------------------------------------------- */
// ... (All core math and camera functions remain the same) ...
// NOTE: The function that returns the material should be defined before init() runs
async function createGlobeMaterial() {
  const texture = await new Promise((res, rej) => {
    new THREE.TextureLoader().load(
      SAT_TEXTURE_URL,
      t => {
        t.anisotropy = renderer.capabilities.getMaxAnisotropy();
        t.colorSpace = THREE.SRGBColorSpace;
        res(t);
      },
      undefined,
      rej
    );
  });
  return new THREE.MeshStandardMaterial({ map: texture });
}

/* ===== Core math utilities ===== */
/* Correct lat/lon → Cartesian (post‑Gemini working mapping) */
function latLonToVector3(lat, lon, radius = RADIUS) {
  const phi = THREE.MathUtils.degToRad(90 - lat);
  const theta = THREE.MathUtils.degToRad(lon);
  return new THREE.Vector3(
    radius * Math.sin(phi) * Math.cos(theta),  // X
    radius * Math.cos(phi),                    // Y
    -radius * Math.sin(phi) * Math.sin(theta)  // Z
  );
}
/* Inverse Cartesian → lat/lon (for center-of-view tracking) */
function vector3ToLatLon(vector) {
    const R = vector.length(); 
    const yOverR = THREE.MathUtils.clamp(vector.y / R, -1, 1);
    
    // Y-up axis correctly implies phi calculation
    const phi = Math.acos(yOverR); 
    
    // --- CRITICAL CHECK: Does this match your Z-axis sign? ---
    // If your forward formula uses -R * sin(phi) * sin(theta) for Z, 
    // then the inverse MUST use atan2(-vector.z, vector.x) for theta.
    const theta = Math.atan2(-vector.z, vector.x); // <--- This must be correct

    // 4. Convert Angles back to Degrees and apply the 90° latitude offset
    // lat = 90 - (phi in degrees)
    const lat = 90 - THREE.MathUtils.radToDeg(phi); 
    
    // lon = (theta in degrees)
    let lon = THREE.MathUtils.radToDeg(theta);

    // Ensure longitude is wrapped to the standard -180 to 180 range
    if (lon > 180) {
        lon -= 360;
    } else if (lon < -180) {
        lon += 360;
    }

    return { 
        lat: lat.toFixed(2), 
        lon: lon.toFixed(2) 
    };
}

// Function to update the HTML display element
function updateHTMLLabel(coords) {
    const label = document.getElementById('centerCoordLabel');
    if (label) {
        // Updated display format
        label.innerHTML = `Lat: ${coords.lat}° | Lon: ${coords.lon}°`;
    }
}

/* ========================================= */
/* 🚀 Core Animation Utilities (Math)        */
/* ========================================= */

// Easing function for smooth start/stop

function easeInOutQuad(t) {
  return t < 0.5 ? 2*t*t : 1 - Math.pow(-2*t + 2, 2) / 2;
}

// Spherical Linear Interpolation for smooth rotation along the globe surface
function slerpUnit(a, b, t) {
  const v0 = a.clone().normalize();
  const v1 = b.clone().normalize();
  let dot = THREE.MathUtils.clamp(v0.dot(v1), -1, 1);

  if (dot < -0.9995) {
    let orth = new THREE.Vector3(1,0,0).cross(v0);
    if (orth.lengthSq() < 1e-6) orth = new THREE.Vector3(0,1,0).cross(v0);
    orth.normalize();
    const angle = Math.PI * t;
    return v0.clone().multiplyScalar(Math.cos(angle))
      .add(orth.clone().multiplyScalar(Math.sin(angle))).normalize();
  }
  if (dot > 0.9995) return v0.clone().lerp(v1, t).normalize();

  const theta = Math.acos(dot);
  const sinTheta = Math.sin(theta);
  const s0 = Math.sin((1 - t) * theta) / sinTheta;
  const s1 = Math.sin(t * theta) / sinTheta;
  return v0.clone().multiplyScalar(s0).add(v1.clone().multiplyScalar(s1)).normalize();
}

/* ========================================= */
/* 🎥 High-Level Camera Controls             */
/* ========================================= */
// Immediately sets the camera to look at a point from a specific distance
function setCameraToLatLon(lat, lon, distance = CAMERA_DISTANCE) {
  const dir = latLonToVector3(lat, lon).normalize();
  camera.position.copy(dir.multiplyScalar(distance));
  camera.up.set(0, 1, 0);
  camera.lookAt(0, 0, 0);
}

// Animates camera rotation at a fixed distance (uses slerp)
function animateCameraTo(lat, lon, duration = 1500, distance = CAMERA_DISTANCE) {
  const startDir = camera.position.clone().normalize();
  const endDir = latLonToVector3(lat, lon).normalize();
  const startTime = performance.now();
  return new Promise(resolve => {
    function step(now) {
      const t = Math.min(1, (now - startTime) / duration);
      const e = easeInOutQuad(t);
      const dir = slerpUnit(startDir, endDir, e);
      camera.position.copy(dir.multiplyScalar(distance));
      camera.up.set(0, 1, 0);
      camera.lookAt(0, 0, 0);
      if (t < 1) requestAnimationFrame(step); else resolve();
    }
    requestAnimationFrame(step);
  });
}

// Animates a zoom in/out *without* changing direction (uses lerp on distance)
function animateCameraZoomTo(lat, lon, targetDistance = CLOSE_DISTANCE, duration = 1000) {
  const startDist = camera.position.length();
  const dir = latLonToVector3(lat, lon).normalize(); // correct direction
  const startTime = performance.now();

  return new Promise(resolve => {
    function step(now) {
      const t = Math.min(1, (now - startTime) / duration);
      const e = easeInOutQuad(t);
      const dist = THREE.MathUtils.lerp(startDist, targetDistance, e);
      camera.position.copy(dir.clone().multiplyScalar(dist));
      camera.up.set(0, 1, 0);
      camera.lookAt(0, 0, 0);
      if (t < 1) requestAnimationFrame(step); else resolve();
    }
    requestAnimationFrame(step);
  });
}

// Primary animation function: smooth rotation (slerp) AND zoom (lerp) simultaneously
function animateCameraToLatLon(lat, lon, fromDistance, toDistance, duration = 1500) {
  const startDir = camera.position.clone().normalize();
  const endDir = latLonToVector3(lat, lon).normalize();
  const startDist = camera.position.length();
  const startTime = performance.now();

  return new Promise(resolve => {
    function step(now) {
      const t = Math.min(1, (now - startTime) / duration);
      const e = easeInOutQuad(t);
      const dir = slerpUnit(startDir, endDir, e);
      const dist = THREE.MathUtils.lerp(fromDistance, toDistance, e);
      camera.position.copy(dir.multiplyScalar(dist));
      camera.up.set(0, 1, 0);
      camera.lookAt(0, 0, 0);
      if (t < 1) requestAnimationFrame(step); else resolve();
    }
    requestAnimationFrame(step);
  });
}


/* ===== Helpers ===== */
function highlightCountry(feature, color = 0xff3366, linewidth = 6) {
  highlightGroup.clear(); // Remove previous highlight

  const rings = [];
  const g = feature.geometry;
  if (!g) return;

  if (g.type === "Polygon") {
    rings.push(...g.coordinates);
  } else if (g.type === "MultiPolygon") {
    g.coordinates.forEach(polygon => rings.push(...polygon));
  }

  rings.forEach(ring => {
    const pts = ring.flatMap(([lon, lat]) => {
      const v = latLonToVector3(lat, lon, RADIUS * 1.005); // Float above base
      return [v.x, v.y, v.z];
    });

    const geo = new LineGeometry();
    geo.setPositions(pts);

    const mat = new LineMaterial({
      color,
      linewidth,
      transparent: true,
      opacity: 0.5,
      dashed: true,
      dashOffset: 0 // 👈 initial offset
    });
    mat.resolution.set(window.innerWidth, window.innerHeight);

    const line = new Line2(geo, mat);
    line.computeLineDistances();
    highlightGroup.add(line);
  });
}


/* Draw GeoJSON feature boundaries on the globe surface */
function drawBoundary(geojson, options = {}) {
  const color = options.color ?? 0xffcc00;
  const offset = options.offset ?? 0.9999;
  const linewidth = options.linewidth !== undefined ? options.linewidth : 0.001;

  const group = new THREE.Group();
  const rings = [];

  (geojson.features || []).forEach(f => {
    const g = f.geometry;
    if (!g) return;
    if (g.type === "Polygon") {
      rings.push(...g.coordinates);
    } else if (g.type === "MultiPolygon") {
      g.coordinates.forEach(polygon => rings.push(...polygon));
    }
  });

  rings.forEach(ring => {
    const pts = [];
    ring.forEach(([lon, lat]) => {
      const v = latLonToVector3(lat, lon, RADIUS * offset);
      pts.push(v.x, v.y, v.z);
    });

    const geo = new LineGeometry();
    geo.setPositions(pts);

    const mat = new LineMaterial({
      color,
      linewidth,
      transparent: true,
      opacity: 0.6, // simulate fil
      dashed: false
    });
    mat.resolution.set(window.innerWidth, window.innerHeight);

    const line = new Line2(geo, mat);
    line.computeLineDistances();
    group.add(line);
  });

  globeGroup.add(group);
  return group;
}

async function findAndDrawCountryByISO3(isoCode3, boundaryColor = 0x00ffff) {
  const countries = await loadCountriesWithISO3();

  const countryData = MIDDLE_POWERS[isoCode3] || Object.values(MIDDLE_POWERS).find(c => c.iso3 === isoCode3);
  if (!countryData) {
    console.warn("Missing metadata for:", isoCode3);
    return null;
  }

  let feature = countries.features.find(f => f.properties.iso3 === isoCode3);

  if (!feature && countryData.name) {
    feature = countries.features.find(f => f.properties?.name === countryData.name);
  }

  if (feature) {
    drawBoundary(
      { type: "FeatureCollection", features: [feature] },
      { linewidth: 2.5, color: boundaryColor, offset: 1.001 }
    );
    const [lon, lat] = d3.geoCentroid(feature);

    return [lat, lon];
  }

  console.warn("False polygon found for:", isoCode3);
  return null;
}





/* -------------------------------- */
/* 🖱️ Widget and Event Handlers (Setup) */
/* -------------------------------- */

function setupUI() {
    const countrySelect = document.getElementById("middlePowerSelector");
    if (!countrySelect) {
        console.warn("middlePowerSelector element not found.");
        return;
    }

    // 1. Clear and Add Placeholder Option
    countrySelect.innerHTML = '';
    const placeholderOption = document.createElement('option');
    placeholderOption.value = "";
    placeholderOption.textContent = "Select a Middle Power...";
    placeholderOption.disabled = true;
    placeholderOption.selected = true;
    countrySelect.appendChild(placeholderOption);

    // 2. Get and explicitly sort the ISO codes
    const sortedIsoCodes = Object.keys(MIDDLE_POWERS).sort();

    // 3. Populate with sorted data (ISO code as value, Label as text)
    for (const isoCode of sortedIsoCodes) { 
        const countryData = MIDDLE_POWERS[isoCode];
        const option = document.createElement('option');
        
        // VALUE is the ISO code (e.g., "AR")
        option.value = isoCode;
        
        // TEXT is the user-friendly label (e.g., "Argentina (阿根廷) 🇦🇷")
        option.textContent = countryData.label; 
        countrySelect.appendChild(option);
    }

    // 4. Set Event Handler
    countrySelect.onchange = (e) => {
        // e.target.value will be the ISO3 code (e.g., "PL")
        animateToSelectedCountry(e.target.value); 
    };
    
    // 5. Set initial selection state in the UI for the animation sequence
    countrySelect.value = "PL"; 
}

/* ---------------------------------------------------- */
/* 🔄 SCENE & APP LIFECYCLE */
/* ---------------------------------------------------- */

// Resize & render
function onResize() {
    // These variables are globally defined and assigned in init()
    if (!container) return; 
    const w = container.clientWidth, h = container.clientHeight;
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
}
window.addEventListener("resize", onResize);


function animate() {
    requestAnimationFrame(animate);
    controls.update();

    // === START: LAT/LON Center Display Logic ===

    // 🎯 FIX: Check if the globeMesh is defined before using it for raycasting.
    if (globeMesh) {
        // 1. Raycast through the center of the screen
        raycaster.setFromCamera(screenCenter, camera);
        
        // 2. Find the intersection with the globe mesh
// Use globeMesh if it's the single Mesh, or globeGroup.children if it's nested
        const target = Array.isArray(globeGroup.children) ? globeGroup.children : globeMesh; 
        const intersects = raycaster.intersectObjects(target, true); // Safer to use Objects/Group

        console.log("Intersects found:", intersects.length); // DEBUG 1

        if (intersects.length > 0) {
            const intersectionPoint = intersects[0].point;
            
            // --- NEW DEBUG ---
            const coords = vector3ToLatLon(intersectionPoint);
            console.log("Calculated Coords:", coords); // DEBUG 2

            // --- END NEW DEBUG ---


            updateHTMLLabel(coords);
        } else {
            updateHTMLLabel({ lat: '---', lon: '---' }); 
        }
    } else {
        // Option: Show a loading message if the globe isn't ready
        updateHTMLLabel({ lat: 'Loading...', lon: 'Loading...' }); 
    }
    
    // === END: LAT/LON Center Display Logic ===

    // 🌀 Animate dash offset (your existing code)
    dashAnimationTime += 0.02;
    highlightGroup.traverse(obj => {
        if (obj.material && obj.material.dashed) {
            obj.material.dashOffset = dashAnimationTime;
            obj.material.needsUpdate = true;
        }
    });

    renderer.render(scene, camera);
}

async function drawAllCountries(boundaryColor = 0x00ffff) {
  const resp = await fetch(TOPO_URL);
  const countries = await resp.json(); // already a FeatureCollection

  drawBoundary(countries, {
    linewidth: 0.002,
    color: boundaryColor,
    offset: 1.001
  });

  return countries;
}


/* ===== Init & sequence (The main setup logic) ===== */

async function init() {
    // 1. DOM/RENDERER SETUP
    container = document.getElementById("globe");
    if (!container) {
        console.error("Error: Could not find HTML element with ID 'globe'. Aborting initialization.");
        return;
    }
    
    // Assign scene components to the global 'let' variables
    scene = new THREE.Scene(); // 🔥 FIX 2: Create scene first
    const lightGrayColor = 0xE0E0E0;
    scene.background = new THREE.Color(lightGrayColor);

    /* Highlighting the selected country */    
    scene.add(highlightGroup);

    camera = new THREE.PerspectiveCamera(45, container.clientWidth/container.clientHeight, 0.1, 5000);

    // Create RENDERER before calling functions that use it (like createGlobeMaterial)
    renderer = new THREE.WebGLRenderer({ antialias: true }); 
    //renderer.useLegacyLights = true;
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1.0;
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    container.appendChild(renderer.domElement);

    controls = new OrbitControls(camera, renderer.domElement);
    controls.enablePan = false;
    controls.enableDamping = true;
    controls.minDistance = RADIUS * 1.05;
    controls.maxDistance = RADIUS * 6;
    
    // 2. LIGHTING SETUP
    scene.add(new THREE.AmbientLight(0xffffff, 1.2)); 
    // Correctly define and add the DirectionalLight instance:
    const dirLight = new THREE.DirectionalLight(0xffffff, 0.8); 
    dirLight.position.set(5, 10, 7);
    scene.add(dirLight); // 🔥 FIX: Add the light object itself
    
    // 3. GLOBE GROUP SETUP 
    globeGroup = new THREE.Group(); 
    scene.add(globeGroup);

    // 4. ASYNC GLOBE/TOPO LOADING
    globeMesh = await createGlobeMaterial(); // Await ensures renderer is available
    // 🔥 FIX: Define sphereGeometry locally before use
    const sphereGeometry = new THREE.SphereGeometry(RADIUS, 64, 64); 
    globeGroup.add(new THREE.Mesh(sphereGeometry, globeMesh));
    
    // 5. ASYNC GLOBE/BOUNDARY LOADING
    //const countries = await drawAllCountries(0x888888); // draw all outlines in gray

    const centroids = {};
    for (const iso3 in MIDDLE_POWERS) {
      const country = MIDDLE_POWERS[iso3];

      const [cLat, cLon] = await findAndDrawCountryByISO3(iso3, country.color);
      centroids[iso3] = { lat: cLat, lon: cLon };

    }


    // 6. INITIAL ANIMATION SEQUENCE (Refactored to use ISO3 codes)
    //const twn = centroids["TWN"];
    //const pol = centroids["POL"];

    // 🔥 Updated to use closeDistF
    //const TWN_CLOSE_DIST = RADIUS * MIDDLE_POWERS["TWN"].closeDistF;
    //const POL_CLOSE_DIST = RADIUS * MIDDLE_POWERS["POL"].closeDistF;

    // Update selector to match ISO3 key
    countrySelect.value = "POL";
    const THIS = centroids[countrySelect.value];
    const THIS_CLOSE_DIST = RADIUS * MIDDLE_POWERS[countrySelect.value].closeDistF;
    await animateCameraToLatLon(THIS.lat, THIS.lon, THIS_CLOSE_DIST, CAMERA_DISTANCE, 800);
    await animateCameraToLatLon(THIS.lat, THIS.lon, THIS_CLOSE_DIST, CAMERA_DISTANCE, 2800);

    // Set starting camera position at Taiwan's correct distance
    // setCameraToLatLon(twn.lat, twn.lon, TWN_CLOSE_DIST);

    // Sequence: Taiwan (Zoom out to default CAMERA_DISTANCE)
    // await animateCameraToLatLon(twn.lat, twn.lon, TWN_CLOSE_DIST, CAMERA_DISTANCE, 800);

    // Sequence: Poland (Fly + Zoom in to Poland's specific distance)
    // await animateCameraToLatLon(pol.lat, pol.lon, CAMERA_DISTANCE, POL_CLOSE_DIST, 2800);

    
    // 6. START LOOP
    animate();
}

// ------------------------------------------------------------------
// 🔥 THE CRITICAL FIX: Ensure Init runs AFTER the DOM is ready
window.addEventListener('DOMContentLoaded', () => {
    // 1. Set up the UI (Populate Selector and set handlers)
    setupUI(); 
    
    // 2. Initialize the 3D scene and start the animation
    init();
});




// ------------------------------------------------------------------

</script>
```
